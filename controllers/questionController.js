const Question = require("../models/Question");
const ReadingPassage = require("../models/ReadingPassage");

// üîπ T·∫°o c√¢u h·ªèi m·ªõi (C√≥ ho·∫∑c kh√¥ng c√≥ b√†i ƒë·ªçc)
exports.createQuestion = async (req, res) => {
    try {
        const newQuestion = new Question(req.body);
        await newQuestion.save();

        // N·∫øu c√¢u h·ªèi thu·ªôc b√†i ƒë·ªçc, c·∫≠p nh·∫≠t v√†o b√†i ƒë·ªçc
        if (newQuestion.passage_id) {
            await ReadingPassage.findByIdAndUpdate(newQuestion.passage_id, {
                $push: { questions: newQuestion._id }
            });
        }

        res.status(201).json(newQuestion);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// üîπ L·∫•y danh s√°ch t·∫•t c·∫£ c√¢u h·ªèi
exports.getAllQuestions = async (req, res) => {
    try {
        const questions = await Question.find().populate("passage_id");
        res.json(questions);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üîπ L·∫•y c√¢u h·ªèi theo b√†i ƒë·ªçc
exports.getQuestionsByPassage = async (req, res) => {
    try {
        const questions = await Question.find({ passage_id: req.params.passage_id }).populate("passage_id");
        res.json(questions);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üîπ L·∫•y c√¢u h·ªèi KH√îNG thu·ªôc b√†i ƒë·ªçc
exports.getStandaloneQuestions = async (req, res) => {
    try {
        const questions = await Question.find({ passage_id: null });
        res.json(questions);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üîπ C·∫≠p nh·∫≠t c√¢u h·ªèi
exports.updateQuestion = async (req, res) => {
    try {
        const updatedQuestion = await Question.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedQuestion) return res.status(404).json({ message: "Question not found" });
        res.json(updatedQuestion);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// üîπ X√≥a c√¢u h·ªèi
exports.deleteQuestion = async (req, res) => {
    try {
        const deletedQuestion = await Question.findByIdAndDelete(req.params.id);
        if (!deletedQuestion) return res.status(404).json({ message: "Question not found" });

        // N·∫øu c√¢u h·ªèi thu·ªôc b√†i ƒë·ªçc, x√≥a kh·ªèi danh s√°ch c√¢u h·ªèi trong b√†i ƒë·ªçc
        if (deletedQuestion.passage_id) {
            await ReadingPassage.findByIdAndUpdate(deletedQuestion.passage_id, {
                $pull: { questions: deletedQuestion._id }
            });
        }

        res.json({ message: "Question deleted successfully" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
